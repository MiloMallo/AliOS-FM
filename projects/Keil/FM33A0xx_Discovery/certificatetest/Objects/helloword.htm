<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\helloword.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\helloword.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Aug 10 14:59:03 2018
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cut_test_kv_aos_2_003_run &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1a1]">cpu_intrpt_save</a>
 <LI><a href="#[1a2]">cpu_intrpt_restore</a>
 <LI><a href="#[1b3]">cpu_task_switch</a>
 <LI><a href="#[1f5]">cpu_intrpt_switch</a>
 <LI><a href="#[1fd]">cpu_first_task_start</a>
 <LI><a href="#[26]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">NMI_Handler</a><BR>
 <LI><a href="#[24]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">HardFault_Handler</a><BR>
 <LI><a href="#[25]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">SVC_Handler</a><BR>
 <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[103]">__aeabi_assert</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[103]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[3b]">AES_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[40]">BTIM1_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[41]">BTIM2_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[3f]">COMP_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[3d]">DMA_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[42]">ETIM1_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[43]">ETIM2_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[44]">ETIM3_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[45]">ETIM4_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[2c]">FDET_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[46]">GPIO_IRQHandler</a> from gpio.o(i.GPIO_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[2e]">HSPI_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[39]">I2C_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[3a]">LCD_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[3c]">LPTIM_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[2b]">NVMIF_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[25]">SVC_Handler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[29]">SVD_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[27]">SysTick_Handler</a> from soc_init.o(i.SysTick_Handler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_fm33a0xx.o(i.SystemInit) referenced from startup_fm33a0xx.o(.text)
 <LI><a href="#[3e]">TRNG_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[37]">U78160_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[38]">U78161_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[31]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[32]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[33]">UART2_IRQHandler</a> from uart.o(i.UART2_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[34]">UART3_IRQHandler</a> from uart.o(i.UART3_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[35]">UART4_IRQHandler</a> from uart.o(i.UART4_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[36]">UART5_IRQHandler</a> from uart.o(i.UART5_IRQHandler) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[28]">WWDT_IRQHandler</a> from startup_fm33a0xx.o(.text) referenced from startup_fm33a0xx.o(RESET)
 <LI><a href="#[66]">__item_find_cb</a> from kvmgr.o(i.__item_find_cb) referenced from kvmgr.o(i.kv_item_get)
 <LI><a href="#[4f]">__item_gc_cb</a> from kvmgr.o(i.__item_gc_cb) referenced from kvmgr.o(i.aos_kv_gc)
 <LI><a href="#[62]">__item_print_cb</a> from kvmgr.o(i.__item_print_cb) referenced from kvmgr.o(i.handle_kv_cmd)
 <LI><a href="#[65]">__item_recovery_cb</a> from kvmgr.o(i.__item_recovery_cb) referenced from kvmgr.o(i.kv_init)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_fm33a0xx.o(.text)
 <LI><a href="#[4b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[4b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[4c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6a]">aos_kv_gc</a> from kvmgr.o(i.aos_kv_gc) referenced from kvmgr.o(i.trigger_gc)
 <LI><a href="#[4d]">cli_main</a> from cli.o(i.cli_main) referenced from cli.o(i.aos_cli_init)
 <LI><a href="#[19]">cut_test_kv_aos_2_001_run</a> from aos_test.o(i.cut_test_kv_aos_2_001_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1a]">cut_test_kv_aos_2_002_run</a> from aos_test.o(i.cut_test_kv_aos_2_002_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1b]">cut_test_kv_aos_2_003_run</a> from aos_test.o(i.cut_test_kv_aos_2_003_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[5]">cut_test_mm_aos_1_001_run</a> from aos_test.o(i.cut_test_mm_aos_1_001_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[6]">cut_test_mm_aos_1_002_run</a> from aos_test.o(i.cut_test_mm_aos_1_002_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[7]">cut_test_mm_aos_1_003_run</a> from aos_test.o(i.cut_test_mm_aos_1_003_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[8]">cut_test_mm_aos_1_004_run</a> from aos_test.o(i.cut_test_mm_aos_1_004_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[9]">cut_test_mm_aos_1_005_run</a> from aos_test.o(i.cut_test_mm_aos_1_005_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[a]">cut_test_task_aos_1_006_run</a> from aos_test.o(i.cut_test_task_aos_1_006_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[b]">cut_test_task_aos_1_007_run</a> from aos_test.o(i.cut_test_task_aos_1_007_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[c]">cut_test_task_aos_1_008_run</a> from aos_test.o(i.cut_test_task_aos_1_008_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[d]">cut_test_task_aos_1_009_run</a> from aos_test.o(i.cut_test_task_aos_1_009_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[e]">cut_test_task_aos_1_010_run</a> from aos_test.o(i.cut_test_task_aos_1_010_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[f]">cut_test_task_aos_1_011_run</a> from aos_test.o(i.cut_test_task_aos_1_011_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[10]">cut_test_task_aos_1_012_run</a> from aos_test.o(i.cut_test_task_aos_1_012_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[11]">cut_test_task_comm_aos_1_013_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_013_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[12]">cut_test_task_comm_aos_1_014_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_014_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[13]">cut_test_task_comm_aos_1_015_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_015_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[14]">cut_test_task_comm_aos_1_016_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_016_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[15]">cut_test_task_comm_aos_1_017_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_017_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[16]">cut_test_task_comm_aos_1_018_run</a> from aos_test.o(i.cut_test_task_comm_aos_1_018_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[17]">cut_test_timer_aos_1_019_run</a> from aos_test.o(i.cut_test_timer_aos_1_019_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[18]">cut_test_timer_aos_1_020_run</a> from aos_test.o(i.cut_test_timer_aos_1_020_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1c]">cut_test_yloop_aos_2_004_run</a> from aos_test.o(i.cut_test_yloop_aos_2_004_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1d]">cut_test_yloop_aos_2_005_run</a> from aos_test.o(i.cut_test_yloop_aos_2_005_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1e]">cut_test_yloop_aos_2_006_run</a> from aos_test.o(i.cut_test_yloop_aos_2_006_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[1f]">cut_test_yloop_aos_2_007_run</a> from aos_test.o(i.cut_test_yloop_aos_2_007_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[20]">cut_test_yloop_aos_2_008_run</a> from aos_test.o(i.cut_test_yloop_aos_2_008_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[21]">cut_test_yloop_aos_2_009_run</a> from aos_test.o(i.cut_test_yloop_aos_2_009_run) referenced 2 times from aos_test.o(.data)
 <LI><a href="#[5d]">delayed_action1</a> from aos_test.o(i.delayed_action1) referenced from aos_test.o(i.cut_test_yloop_aos_2_005_run)
 <LI><a href="#[5d]">delayed_action1</a> from aos_test.o(i.delayed_action1) referenced from aos_test.o(i.delayed_action1)
 <LI><a href="#[5e]">delayed_action2</a> from aos_test.o(i.delayed_action2) referenced from aos_test.o(i.cut_test_yloop_aos_2_005_run)
 <LI><a href="#[5e]">delayed_action2</a> from aos_test.o(i.delayed_action2) referenced from aos_test.o(i.cut_test_yloop_aos_2_007_run)
 <LI><a href="#[5e]">delayed_action2</a> from aos_test.o(i.delayed_action2) referenced from aos_test.o(i.cut_test_yloop_aos_2_008_run)
 <LI><a href="#[5e]">delayed_action2</a> from aos_test.o(i.delayed_action2) referenced from aos_test.o(i.task_loop1)
 <LI><a href="#[60]">delayed_action3</a> from aos_test.o(i.delayed_action3) referenced from aos_test.o(i.cut_test_yloop_aos_2_008_run)
 <LI><a href="#[74]">devname_cmd</a> from cli.o(i.devname_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[61]">dyn_mem_proc_task</a> from k_dyn_mem_proc.o(i.dyn_mem_proc_task) referenced from k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
 <LI><a href="#[72]">echo_cmd</a> from cli.o(i.echo_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[5c]">ev_callback1</a> from aos_test.o(i.ev_callback1) referenced from aos_test.o(i.cut_test_yloop_aos_2_004_run)
 <LI><a href="#[6c]">event_close</a> from device.o(i.event_close) referenced from device.o(.constdata)
 <LI><a href="#[6f]">event_ioctl</a> from device.o(i.event_ioctl) referenced from device.o(.constdata)
 <LI><a href="#[6b]">event_open</a> from device.o(i.event_open) referenced from device.o(.constdata)
 <LI><a href="#[70]">event_poll</a> from device.o(i.event_poll) referenced from device.o(.constdata)
 <LI><a href="#[6d]">event_read</a> from device.o(i.event_read) referenced from device.o(.constdata)
 <LI><a href="#[4e]">event_read_cb</a> from local_event.o(i.event_read_cb) referenced from local_event.o(i.aos_event_service_deinit)
 <LI><a href="#[4e]">event_read_cb</a> from local_event.o(i.event_read_cb) referenced from local_event.o(i.aos_event_service_init)
 <LI><a href="#[6e]">event_write</a> from device.o(i.event_write) referenced from device.o(.constdata)
 <LI><a href="#[73]">exit_cmd</a> from cli.o(i.exit_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[4a]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[4a]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4a]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[2]">handle_kv_cmd</a> from kvmgr.o(i.handle_kv_cmd) referenced 2 times from kvmgr.o(.data)
 <LI><a href="#[3]">handle_yts_cmd</a> from main.o(i.handle_yts_cmd) referenced 2 times from main.o(.data)
 <LI><a href="#[71]">help_cmd</a> from cli.o(i.help_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[63]">idle_task</a> from k_idle.o(i.idle_task) referenced from k_sys.o(i.krhino_init)
 <LI><a href="#[50]">krhino_task_deathbed</a> from k_task.o(i.krhino_task_deathbed) referenced from port_c.o(i.cpu_task_stack_init)
 <LI><a href="#[4]">log_cmd</a> from log.o(i.log_cmd) referenced 2 times from log.o(.data)
 <LI><a href="#[47]">main</a> from aos.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[78]">ota_cmd</a> from cli.o(i.ota_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[76]">reboot_cmd</a> from cli.o(i.reboot_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[1]">soc_err_proc</a> from soc_impl.o(i.soc_err_proc) referenced 2 times from soc_impl.o(.data)
 <LI><a href="#[69]">sys_init</a> from aos.o(i.sys_init) referenced from aos.o(i.sys_start)
 <LI><a href="#[54]">task0</a> from aos_test.o(i.task0) referenced from aos_test.o(i.cut_test_task_aos_1_012_run)
 <LI><a href="#[51]">task1</a> from aos_test.o(i.task1) referenced from aos_test.o(i.cut_test_task_aos_1_006_run)
 <LI><a href="#[51]">task1</a> from aos_test.o(i.task1) referenced from aos_test.o(i.cut_test_task_aos_1_007_run)
 <LI><a href="#[51]">task1</a> from aos_test.o(i.task1) referenced from aos_test.o(i.cut_test_task_aos_1_011_run)
 <LI><a href="#[52]">task2</a> from aos_test.o(i.task2) referenced from aos_test.o(i.cut_test_task_aos_1_008_run)
 <LI><a href="#[52]">task2</a> from aos_test.o(i.task2) referenced from aos_test.o(i.cut_test_task_aos_1_009_run)
 <LI><a href="#[53]">task3</a> from aos_test.o(i.task3) referenced from aos_test.o(i.cut_test_task_aos_1_010_run)
 <LI><a href="#[55]">task4</a> from aos_test.o(i.task4) referenced from aos_test.o(i.cut_test_task_comm_aos_1_014_run)
 <LI><a href="#[56]">task5</a> from aos_test.o(i.task5) referenced from aos_test.o(i.cut_test_task_comm_aos_1_014_run)
 <LI><a href="#[57]">task6</a> from aos_test.o(i.task6) referenced from aos_test.o(i.cut_test_task_comm_aos_1_016_run)
 <LI><a href="#[58]">task7</a> from aos_test.o(i.task7) referenced from aos_test.o(i.cut_test_task_comm_aos_1_016_run)
 <LI><a href="#[59]">task8</a> from aos_test.o(i.task8) referenced from aos_test.o(i.cut_test_task_comm_aos_1_018_run)
 <LI><a href="#[5a]">task9</a> from aos_test.o(i.task9) referenced from aos_test.o(i.cut_test_task_comm_aos_1_018_run)
 <LI><a href="#[5f]">task_loop1</a> from aos_test.o(i.task_loop1) referenced from aos_test.o(i.cut_test_yloop_aos_2_006_run)
 <LI><a href="#[5f]">task_loop1</a> from aos_test.o(i.task_loop1) referenced from aos_test.o(i.cut_test_yloop_aos_2_009_run)
 <LI><a href="#[67]">tftp_ota_thread</a> from cli.o(i.tftp_ota_thread) referenced from cli.o(i.ota_cmd)
 <LI><a href="#[5b]">timer_handler</a> from aos_test.o(i.timer_handler) referenced from aos_test.o(i.cut_test_timer_aos_1_019_run)
 <LI><a href="#[5b]">timer_handler</a> from aos_test.o(i.timer_handler) referenced from aos_test.o(i.cut_test_timer_aos_1_020_run)
 <LI><a href="#[64]">timer_task</a> from k_timer.o(i.timer_task) referenced from k_timer.o(i.ktimer_init)
 <LI><a href="#[77]">uptime_cmd</a> from cli.o(i.uptime_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[75]">version_cmd</a> from cli.o(i.version_cmd) referenced from cli.o(.constdata)
 <LI><a href="#[68]">vfs_poll_notify</a> from select.o(i.vfs_poll_notify) referenced from select.o(i.pre_poll)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(.text)
</UL>
<P><STRONG><a name="[234]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[235]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[236]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[237]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[238]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[239]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1a1]"></a>cpu_intrpt_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>

<P><STRONG><a name="[1a2]"></a>cpu_intrpt_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>

<P><STRONG><a name="[1b3]"></a>cpu_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[1f5]"></a>cpu_intrpt_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[1fd]"></a>cpu_first_task_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; krhino_stack_ovf_check
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ETIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ETIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ETIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>HSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>NVMIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>U78160_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>U78161_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[23a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[23c]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read_at
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvSend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvRecv
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_poll_read_fd
</UL>

<P><STRONG><a name="[240]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c8]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[1ab]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[219]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
</UL>

<P><STRONG><a name="[104]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[1bd]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_get_test_suite
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_get_test_case
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_cmd
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[106]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
</UL>

<P><STRONG><a name="[125]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>

<P><STRONG><a name="[1d6]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[22d]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[245]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[246]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[247]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[90]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[8a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[89]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[249]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>ANAC_BORCON_OFF_BOR_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_anac.o(i.ANAC_BORCON_OFF_BOR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[b6]"></a>ANAC_PDRCON_PDREN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_anac.o(i.ANAC_PDRCON_PDREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[95]"></a>AltFunIO</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, soc_init.o(i.AltFunIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IO
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[223]"></a>FLASH_Deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>

<P><STRONG><a name="[9a]"></a>FLASH_EPCON_EREQ_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_EPCON_EREQ_Set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[99]"></a>FLASH_EPCON_ERTYPE_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_EPCON_ERTYPE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_EPCON_PREQ_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_EPCON_PREQ_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
</UL>

<P><STRONG><a name="[98]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fm33a0xx_flash.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_ERDIF_Clr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_ERDIF_Chk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_ERTYPE_Set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_EREQ_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_unlock_erase
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_FLSIF_ERDIF_Chk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSIF_ERDIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_FLSIF_ERDIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSIF_ERDIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_FLSIF_PRDIF_Chk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSIF_PRDIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_FLSIF_PRDIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSIF_PRDIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
</UL>

<P><STRONG><a name="[9b]"></a>FLASH_FLSKEY_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSKEY_Write))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_FLSRDCON_WAIT_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_flash.o(i.FLASH_FLSRDCON_WAIT_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_Prog_ByteString</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, fm33a0xx_flash.o(i.FLASH_Prog_ByteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Clr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Chk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_PREQ_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_write_at
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_EXTI_EXTIxIF_ChkEx</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, fm33a0xx_gpio.o(i.GPIO_EXTI_EXTIxIF_ChkEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EXTI_EXTIxIF_ChkEx
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_EXTI_EXTIxIF_ClrEx</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, fm33a0xx_gpio.o(i.GPIO_EXTI_EXTIxIF_ClrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTI_EXTIxIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>GPIO_Get_InitPara</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fm33a0xx_gpio.o(i.GPIO_Get_InitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>

<P><STRONG><a name="[46]"></a>GPIO_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gpio.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_IRQHandler &rArr; GPIO_EXTI_EXTIxIF_ChkEx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIxIF_ClrEx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIxIF_ChkEx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_transform_GPIOx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fm33a0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>

<P><STRONG><a name="[a7]"></a>IWDT_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xx_iwdt.o(i.IWDT_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configDelay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>

<P><STRONG><a name="[a8]"></a>IWDT_IWDTCFG_IWDTOVP_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTOVP_Set))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[a9]"></a>IWDT_IWDTCFG_IWDTSLP4096S_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTSLP4096S_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[a5]"></a>IWDT_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soc_init.o(i.IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDT_Init &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTSLP4096S_Setable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTOVP_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[aa]"></a>Init_IO</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, soc_init.o(i.Init_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Init_IO &rArr; AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>

<P><STRONG><a name="[ac]"></a>Init_PLL</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, soc_init.o(i.Init_PLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_PLL &rArr; RCC_PLL_Init &rArr; RCC_PLLDB_WriteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[af]"></a>Init_RCC_PERIPH_clk</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, soc_init.o(i.Init_RCC_PERIPH_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_RCC_PERIPH_clk &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[b0]"></a>Init_SysClk</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, soc_init.o(i.Init_SysClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[b3]"></a>Init_SysClk_Gen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, soc_init.o(i.Init_SysClk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_SysClk_Gen &rArr; Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSRDCON_WAIT_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_PDRCON_PDREN_Setable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_BORCON_OFF_BOR_Setable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MPRIL_MPRIL_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCC_PERIPH_clk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[b9]"></a>Init_SysTick</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soc_init.o(i.Init_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_SysTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>

<P><STRONG><a name="[bb]"></a>Init_System</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, soc_init.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Init_System &rArr; hal_uart_init &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configDelay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>

<P><STRONG><a name="[ab]"></a>OutputIO</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, soc_init.o(i.OutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IO
</UL>

<P><STRONG><a name="[bf]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, fm33a0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Getable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLINSEL_Get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Getable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLDB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[bd]"></a>RCC_Init_RCHF_Trim</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, fm33a0xx_rcc.o(i.RCC_Init_RCHF_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_Init_RCHF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFTRIM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[b5]"></a>RCC_MPRIL_MPRIL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_MPRIL_MPRIL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[a6]"></a>RCC_PERCLK_SetableEx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fm33a0xx_rcc.o(i.RCC_PERCLK_SetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_write_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_unlock_erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCC_PERIPH_clk
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[c4]"></a>RCC_PLLCON_PLLDB_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLDB_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[ca]"></a>RCC_PLLCON_PLLDB_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLDB_Set))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLDB_WriteEx
</UL>

<P><STRONG><a name="[c2]"></a>RCC_PLLCON_PLLEN_Getable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[ae]"></a>RCC_PLLCON_PLLEN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PLL
</UL>

<P><STRONG><a name="[c3]"></a>RCC_PLLCON_PLLINSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLINSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[cc]"></a>RCC_PLLCON_PLLINSEL_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLINSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Init
</UL>

<P><STRONG><a name="[cb]"></a>RCC_PLLCON_PLLOSEL_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_PLLCON_PLLOSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Init
</UL>

<P><STRONG><a name="[c9]"></a>RCC_PLLDB_WriteEx</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, fm33a0xx_rcc.o(i.RCC_PLLDB_WriteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_PLLDB_WriteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLDB_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Init
</UL>

<P><STRONG><a name="[ad]"></a>RCC_PLL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fm33a0xx_rcc.o(i.RCC_PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_PLL_Init &rArr; RCC_PLLDB_WriteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLDB_WriteEx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLOSEL_Set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLINSEL_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PLL
</UL>

<P><STRONG><a name="[c1]"></a>RCC_RCHFCON_FSEL_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_RCHFCON_FSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[cd]"></a>RCC_RCHFCON_FSEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_RCHFCON_FSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[c0]"></a>RCC_RCHFCON_RCHFEN_Getable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[ce]"></a>RCC_RCHFCON_RCHFEN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[c8]"></a>RCC_RCHFTRIM_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_RCHFTRIM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
</UL>

<P><STRONG><a name="[b1]"></a>RCC_RCHF_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fm33a0xx_rcc.o(i.RCC_RCHF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_RCHF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Setable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[c6]"></a>RCC_SYSCLKSEL_AHBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[d0]"></a>RCC_SYSCLKSEL_AHBPRES_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[c7]"></a>RCC_SYSCLKSEL_APBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[d1]"></a>RCC_SYSCLKSEL_APBPRES_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[d2]"></a>RCC_SYSCLKSEL_EXTICKSEL_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_EXTICKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[d4]"></a>RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[d3]"></a>RCC_SYSCLKSEL_SLP_ENEXTI_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_SLP_ENEXTI_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[c5]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[cf]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[b2]"></a>RCC_SysClk_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fm33a0xx_rcc.o(i.RCC_SysClk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SLP_ENEXTI_Setable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_EXTICKSEL_Set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[b8]"></a>SCU_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, soc_init.o(i.SCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_WWDT_STOP_Setable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_IWDT_STOP_Setable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET4_STOP_Setable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET3_STOP_Setable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET2_STOP_Setable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET1_STOP_Setable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT2_STOP_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT1_STOP_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[dc]"></a>SCU_MCUDBGCR_DBG_BT1_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[db]"></a>SCU_MCUDBGCR_DBG_BT2_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[da]"></a>SCU_MCUDBGCR_DBG_ET1_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d9]"></a>SCU_MCUDBGCR_DBG_ET2_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d8]"></a>SCU_MCUDBGCR_DBG_ET3_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET3_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d7]"></a>SCU_MCUDBGCR_DBG_ET4_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET4_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d6]"></a>SCU_MCUDBGCR_DBG_IWDT_STOP_Setable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_IWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d5]"></a>SCU_MCUDBGCR_DBG_WWDT_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xx_scu.o(i.SCU_MCUDBGCR_DBG_WWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, soc_init.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_fm33a0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART3_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_IRQHandler &rArr; UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>UART_BaudREGCalc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fm33a0xx_uart.o(i.UART_BaudREGCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[f0]"></a>UART_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fm33a0xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXIS_Set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_STOPSEL_Set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_IREN_Setable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUFSTA_TX_INTSEL_Set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SPBRG_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_PDSEL_Set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_ERRIE_Setable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_TXDFLAG_Setable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RXDFLAG_Setable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RTX7EN_Setable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[e7]"></a>UART_UARTIE_RxTxIE_GetableEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UART_UARTIE_RxTxIE_GetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvSend
</UL>

<P><STRONG><a name="[e3]"></a>UART_UARTIE_RxTxIE_SetableEx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UART_UARTIE_RxTxIE_SetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InterruptTx
</UL>

<P><STRONG><a name="[ef]"></a>UART_UARTIF_RxTxIF_ChkEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UART_UARTIF_RxTxIF_ChkEx))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>UARTx_RTXCON_RTX7EN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RTXCON_RTX7EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f8]"></a>UARTx_RTXCON_RXDFLAG_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RTXCON_RXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>UARTx_RTXCON_TXDFLAG_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RTXCON_TXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e0]"></a>UARTx_RXREG_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RXREG_Read))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InterruptRx
</UL>

<P><STRONG><a name="[f5]"></a>UARTx_RXSTA_ERRIE_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RXSTA_ERRIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f2]"></a>UARTx_RXSTA_PDSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RXSTA_PDSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fa]"></a>UARTx_RXSTA_RXEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_RXSTA_RXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f1]"></a>UARTx_SPBRG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_SPBRG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>UARTx_TXBUFSTA_TX_INTSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXBUFSTA_TX_INTSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>UARTx_TXREG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXREG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InterruptTx
</UL>

<P><STRONG><a name="[fb]"></a>UARTx_TXSTA_IREN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXSTA_IREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f4]"></a>UARTx_TXSTA_STOPSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXSTA_STOPSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e8]"></a>UARTx_TXSTA_TXEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXSTA_TXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvSend
</UL>

<P><STRONG><a name="[f6]"></a>UARTx_TXSTA_TXIS_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33a0xx_uart.o(i.UARTx_TXSTA_TXIS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>__0fprintf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24c]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[11a]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_run_test_case
</UL>

<P><STRONG><a name="[24d]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[24e]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[fe]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_print_result
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task7
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_callback1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_test_config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayed_action2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayed_action1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_result_report
</UL>

<P><STRONG><a name="[250]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[251]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ff]"></a>__0snprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[252]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1bc]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[253]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[254]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[100]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[255]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1be]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
</UL>

<P><STRONG><a name="[256]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[257]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[101]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[258]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[259]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[25a]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1b4]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
</UL>

<P><STRONG><a name="[102]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[25c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[25d]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[126]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>

<P><STRONG><a name="[92]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15f]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xx_anac.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_transform_GPIOx
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_assert</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, armcc_libc.o(i.__aeabi_assert))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[25e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[25f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[260]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[261]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11b]"></a>add_test</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, testcase_register.o(i.add_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = add_test &rArr; test_certificate &rArr; cut_main &rArr; cut_result_report &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[11d]"></a>aos_cancel_delayed_action</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, yloop.o(i.aos_cancel_delayed_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = aos_cancel_delayed_action &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayed_action1
</UL>

<P><STRONG><a name="[11f]"></a>aos_cancel_poll_read_fd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, yloop.o(i.aos_cancel_poll_read_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = aos_cancel_poll_read_fd &rArr; get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_deinit
</UL>

<P><STRONG><a name="[121]"></a>aos_cli_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, cli.o(i.aos_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = aos_cli_init &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_commands
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cli_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_service_init
</UL>

<P><STRONG><a name="[109]"></a>aos_cli_printf</STRONG> (Thumb, 88 bytes, Stack size 288 bytes, cli.o(i.aos_cli_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_cmd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_cmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_cmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devname_cmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>

<P><STRONG><a name="[128]"></a>aos_cli_register_command</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, cli.o(i.aos_cli_register_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aos_cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_commands
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[122]"></a>aos_cli_register_commands</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cli.o(i.aos_cli_register_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aos_cli_register_commands &rArr; aos_cli_register_command
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cli_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>

<P><STRONG><a name="[129]"></a>aos_close</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, vfs.o(i.aos_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = aos_close &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_deinit
</UL>

<P><STRONG><a name="[12c]"></a>aos_event_service_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, local_event.o(i.aos_event_service_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = aos_event_service_deinit &rArr; aos_close &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_poll_read_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
</UL>

<P><STRONG><a name="[12d]"></a>aos_event_service_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, local_event.o(i.aos_event_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = aos_event_service_init &rArr; aos_poll_read_fd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_set_eventfd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
</UL>

<P><STRONG><a name="[16b]"></a>aos_fcntl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, select.o(i.aos_fcntl))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
</UL>

<P><STRONG><a name="[108]"></a>aos_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_delayed_action
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unregister_event_filter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_deinit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
</UL>

<P><STRONG><a name="[1d1]"></a>aos_get_hz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_get_hz))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>

<P><STRONG><a name="[132]"></a>aos_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = aos_init &rArr; krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>

<P><STRONG><a name="[134]"></a>aos_ioctl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, vfs.o(i.aos_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>

<P><STRONG><a name="[135]"></a>aos_kernel_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aos_init.o(i.aos_kernel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = aos_kernel_init &rArr; cli_service_init &rArr; aos_cli_init &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[13c]"></a>aos_kv_del</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, kvmgr.o(i.aos_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = aos_kv_del &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
</UL>

<P><STRONG><a name="[6a]"></a>aos_kv_gc</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, kvmgr.o(i.aos_kv_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = aos_kv_gc &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal_all
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.trigger_gc)
</UL>
<P><STRONG><a name="[144]"></a>aos_kv_get</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, kvmgr.o(i.aos_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = aos_kv_get &rArr; kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[139]"></a>aos_kv_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, kvmgr.o(i.aos_kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = aos_kv_init &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[149]"></a>aos_kv_set</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, kvmgr.o(i.aos_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[14d]"></a>aos_loop_destroy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, yloop.o(i.aos_loop_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = aos_loop_destroy &rArr; aos_event_service_deinit &rArr; aos_close &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
</UL>

<P><STRONG><a name="[151]"></a>aos_loop_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yloop.o(i.aos_loop_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = aos_loop_exit &rArr; get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_callback1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayed_action2
</UL>

<P><STRONG><a name="[13a]"></a>aos_loop_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, yloop.o(i.aos_loop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = aos_loop_init &rArr; aos_event_service_init &rArr; aos_poll_read_fd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
</UL>

<P><STRONG><a name="[155]"></a>aos_loop_run</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, yloop.o(i.aos_loop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
</UL>

<P><STRONG><a name="[130]"></a>aos_loop_set_eventfd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yloop.o(i.aos_loop_set_eventfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = aos_loop_set_eventfd &rArr; get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[de]"></a>aos_malloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialBuffInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
</UL>

<P><STRONG><a name="[159]"></a>aos_msleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_msleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_msleep &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reboot
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
</UL>

<P><STRONG><a name="[15c]"></a>aos_mutex_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[1bf]"></a>aos_mutex_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_mutex_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[10d]"></a>aos_mutex_lock</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[145]"></a>aos_mutex_new</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cli_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[10e]"></a>aos_mutex_unlock</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
</UL>

<P><STRONG><a name="[119]"></a>aos_now_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_now_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_run_test_case
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_cmd
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_yts_cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[12e]"></a>aos_open</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, vfs.o(i.aos_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aos_open &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[156]"></a>aos_poll</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, select.o(i.aos_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_io
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_parg
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[12f]"></a>aos_poll_read_fd</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, yloop.o(i.aos_poll_read_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = aos_poll_read_fd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_fcntl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_service_init
</UL>

<P><STRONG><a name="[16d]"></a>aos_post_delayed_action</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, yloop.o(i.aos_post_delayed_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_post_delayed_action &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayed_action1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
</UL>

<P><STRONG><a name="[16e]"></a>aos_post_event</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, local_event.o(i.aos_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
</UL>

<P><STRONG><a name="[170]"></a>aos_queue_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_queue_free &rArr; krhino_buf_queue_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[1c1]"></a>aos_queue_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_queue_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[172]"></a>aos_queue_new</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, aos_rhino.o(i.aos_queue_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_queue_new &rArr; krhino_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[174]"></a>aos_queue_recv</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, aos_rhino.o(i.aos_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = aos_queue_recv &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[176]"></a>aos_queue_send</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_queue_send &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
</UL>

<P><STRONG><a name="[178]"></a>aos_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vfs.o(i.aos_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read_cb
</UL>

<P><STRONG><a name="[179]"></a>aos_realloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_realloc &rArr; krhino_mm_realloc &rArr; k_mm_realloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
</UL>

<P><STRONG><a name="[17b]"></a>aos_register_driver</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, vfs_register.o(i.aos_register_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = aos_register_driver &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
</UL>

<P><STRONG><a name="[17d]"></a>aos_register_event_filter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, local_event.o(i.aos_register_event_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_register_event_filter &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
</UL>

<P><STRONG><a name="[17e]"></a>aos_sem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_sem_free &rArr; krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_parg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
</UL>

<P><STRONG><a name="[1c0]"></a>aos_sem_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_sem_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[147]"></a>aos_sem_new</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
</UL>

<P><STRONG><a name="[181]"></a>aos_sem_signal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_poll_notify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task7
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
</UL>

<P><STRONG><a name="[142]"></a>aos_sem_signal_all</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_signal_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_sem_signal_all &rArr; krhino_sem_give_all &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
</UL>

<P><STRONG><a name="[14a]"></a>aos_sem_wait</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_io
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task7
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
</UL>

<P><STRONG><a name="[185]"></a>aos_set_log_level</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, log.o(i.aos_set_log_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aos_set_log_level &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[186]"></a>aos_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aos_start &rArr; krhino_start
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>

<P><STRONG><a name="[143]"></a>aos_task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_ota_thread
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task7
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task0
</UL>

<P><STRONG><a name="[14e]"></a>aos_task_getspecific</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_task_getspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aos_task_getspecific &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
</UL>

<P><STRONG><a name="[153]"></a>aos_task_key_create</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, aos_rhino.o(i.aos_task_key_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aos_task_key_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
</UL>

<P><STRONG><a name="[226]"></a>aos_task_key_delete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_task_key_delete))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
</UL>

<P><STRONG><a name="[18b]"></a>aos_task_name</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_task_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aos_task_name &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_loop1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task7
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task6
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[18c]"></a>aos_task_new</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, aos_rhino.o(i.aos_task_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
</UL>

<P><STRONG><a name="[123]"></a>aos_task_new_ext</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, aos_rhino.o(i.aos_task_new_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
</UL>

<P><STRONG><a name="[150]"></a>aos_task_setspecific</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_task_setspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
</UL>

<P><STRONG><a name="[18f]"></a>aos_timer_change</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, aos_rhino.o(i.aos_timer_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = aos_timer_change &rArr; krhino_timer_change &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
</UL>

<P><STRONG><a name="[191]"></a>aos_timer_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_timer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = aos_timer_free &rArr; krhino_timer_dyn_del &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
</UL>

<P><STRONG><a name="[193]"></a>aos_timer_new</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, aos_rhino.o(i.aos_timer_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = aos_timer_new &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
</UL>

<P><STRONG><a name="[195]"></a>aos_timer_start</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = aos_timer_start &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
</UL>

<P><STRONG><a name="[197]"></a>aos_timer_stop</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = aos_timer_stop &rArr; krhino_timer_stop &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
</UL>

<P><STRONG><a name="[199]"></a>aos_uart_recv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vfs.o(i.aos_uart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_uart_recv &rArr; hal_uart_recv_II &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
</UL>

<P><STRONG><a name="[19b]"></a>aos_uart_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs.o(i.aos_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
</UL>

<P><STRONG><a name="[19d]"></a>aos_unregister_event_filter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, local_event.o(i.aos_unregister_event_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = aos_unregister_event_filter &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
</UL>

<P><STRONG><a name="[154]"></a>aos_zalloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = aos_zalloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
</UL>

<P><STRONG><a name="[13b]"></a>application_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.application_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = application_start &rArr; aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[19e]"></a>board_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = board_init &rArr; soc_init &rArr; Init_System &rArr; hal_uart_init &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[1a9]"></a>cli_getchar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cli.o(i.cli_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = cli_getchar &rArr; aos_uart_recv &rArr; hal_uart_recv_II &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_uart_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[127]"></a>cli_putstr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cli.o(i.cli_putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_uart_send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
</UL>

<P><STRONG><a name="[138]"></a>cli_service_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aos_init.o(i.cli_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = cli_service_init &rArr; aos_cli_init &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[1a8]"></a>core_sched</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, k_sched.o(i.core_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = core_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[227]"></a>cpu_task_stack_init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, port_c.o(i.cpu_task_stack_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[152]"></a>csp_printf</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, log.o(i.csp_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_yts_cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[1b5]"></a>cut_main</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, cut.o(i.cut_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = cut_main &rArr; cut_result_report &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_result_report
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
</UL>

<P><STRONG><a name="[12b]"></a>del_file</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs_file.o(i.del_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = del_file
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
</UL>

<P><STRONG><a name="[61]"></a>dyn_mem_proc_task</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
</UL>
<P><STRONG><a name="[1c4]"></a>dyn_mem_proc_task_start</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task_start &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, soc_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[1ba]"></a>free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, armcc_libc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_result_report
</UL>

<P><STRONG><a name="[165]"></a>get_fd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs_file.o(i.get_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_fd &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[12a]"></a>get_file</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vfs_file.o(i.get_file))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
</UL>

<P><STRONG><a name="[1ca]"></a>hal_flash_erase</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, flash.o(i.hal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hal_flash_erase &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_write_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_unlock_erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_erase
</UL>

<P><STRONG><a name="[1cb]"></a>hal_flash_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash.o(i.hal_flash_get_info))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>

<P><STRONG><a name="[1cc]"></a>hal_flash_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, flash.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_flash_read &rArr; _flash_read_at &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read_at
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
</UL>

<P><STRONG><a name="[1cd]"></a>hal_flash_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flash.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_get_info
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
</UL>

<P><STRONG><a name="[1cf]"></a>hal_reboot</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aos.o(i.hal_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = hal_reboot &rArr; aos_msleep &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_cmd
</UL>

<P><STRONG><a name="[be]"></a>hal_uart_init</STRONG> (Thumb, 570 bytes, Stack size 80 bytes, uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = hal_uart_init &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialBuffInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[19a]"></a>hal_uart_recv_II</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, uart.o(i.hal_uart_recv_II))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = hal_uart_recv_II &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_hz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvRecv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_uart_recv
</UL>

<P><STRONG><a name="[19c]"></a>hal_uart_send</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, uart.o(i.hal_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_hz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SvSend
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialGetSendRemain
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_uart_send
</UL>

<P><STRONG><a name="[63]"></a>idle_task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_idle.o(i.idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_sys.o(i.krhino_init)
</UL>
<P><STRONG><a name="[1d7]"></a>inode_alloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[1d5]"></a>inode_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs_inode.o(i.inode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[163]"></a>inode_open</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inode_open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[1d8]"></a>inode_ptr_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ptr_get))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[210]"></a>inode_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ref))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
</UL>

<P><STRONG><a name="[17c]"></a>inode_reserve</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vfs_inode.o(i.inode_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = inode_reserve &rArr; inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ptr_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_alloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_set_name
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>

<P><STRONG><a name="[1c2]"></a>inode_unref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_unref))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>

<P><STRONG><a name="[1b1]"></a>k_err_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_err.o(i.k_err_proc))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[1da]"></a>k_mm_alloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, k_mm.o(i.k_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_up_level
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>

<P><STRONG><a name="[1e0]"></a>k_mm_free</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>

<P><STRONG><a name="[1e2]"></a>k_mm_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, k_mm.o(i.k_mm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = k_mm_init &rArr; krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[1e5]"></a>k_mm_realloc</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, k_mm.o(i.k_mm_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = k_mm_realloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
</UL>

<P><STRONG><a name="[1f2]"></a>kobj_list_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_stats.o(i.kobj_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[1e4]"></a>krhino_add_mm_region</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, k_mm.o(i.krhino_add_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[173]"></a>krhino_buf_queue_create</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, k_buf_queue.o(i.krhino_buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
</UL>

<P><STRONG><a name="[171]"></a>krhino_buf_queue_del</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, k_buf_queue.o(i.krhino_buf_queue_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
</UL>

<P><STRONG><a name="[175]"></a>krhino_buf_queue_recv</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, k_buf_queue.o(i.krhino_buf_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
</UL>

<P><STRONG><a name="[177]"></a>krhino_buf_queue_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_buf_queue.o(i.krhino_buf_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
</UL>

<P><STRONG><a name="[189]"></a>krhino_cur_task_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, k_task.o(i.krhino_cur_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
</UL>

<P><STRONG><a name="[1ef]"></a>krhino_fix_buf_queue_create</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, k_buf_queue.o(i.krhino_fix_buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_fix_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[133]"></a>krhino_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, k_sys.o(i.krhino_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</UL>

<P><STRONG><a name="[1e3]"></a>krhino_init_mm_head</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, k_mm.o(i.krhino_init_mm_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[e9]"></a>krhino_intrpt_enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_sys.o(i.krhino_intrpt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>

<P><STRONG><a name="[eb]"></a>krhino_intrpt_exit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, k_sys.o(i.krhino_intrpt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>

<P><STRONG><a name="[1e6]"></a>krhino_mblk_alloc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[1e7]"></a>krhino_mblk_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[1f4]"></a>krhino_mblk_pool_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, k_mm_blk.o(i.krhino_mblk_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[158]"></a>krhino_mm_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mm.o(i.krhino_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
</UL>

<P><STRONG><a name="[131]"></a>krhino_mm_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, k_mm.o(i.krhino_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>

<P><STRONG><a name="[17a]"></a>krhino_mm_realloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, k_mm.o(i.krhino_mm_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_mm_realloc &rArr; k_mm_realloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_realloc
</UL>

<P><STRONG><a name="[15a]"></a>krhino_ms_to_ticks</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, k_time.o(i.krhino_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
</UL>

<P><STRONG><a name="[160]"></a>krhino_mutex_create</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, k_mutex.o(i.krhino_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_create &rArr; mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[15d]"></a>krhino_mutex_del</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>

<P><STRONG><a name="[15e]"></a>krhino_mutex_lock</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, k_mutex.o(i.krhino_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>

<P><STRONG><a name="[161]"></a>krhino_mutex_unlock</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>

<P><STRONG><a name="[180]"></a>krhino_sem_create</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</UL>

<P><STRONG><a name="[17f]"></a>krhino_sem_del</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</UL>

<P><STRONG><a name="[182]"></a>krhino_sem_give</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>

<P><STRONG><a name="[183]"></a>krhino_sem_give_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, k_sem.o(i.krhino_sem_give_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give_all &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal_all
</UL>

<P><STRONG><a name="[184]"></a>krhino_sem_take</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, k_sem.o(i.krhino_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
</UL>

<P><STRONG><a name="[7b]"></a>krhino_stack_ovf_check</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_stats.o(i.krhino_stack_ovf_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = krhino_stack_ovf_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[187]"></a>krhino_start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, k_sys.o(i.krhino_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
</UL>

<P><STRONG><a name="[1fe]"></a>krhino_sys_tick_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, k_time.o(i.krhino_sys_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_sys_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[162]"></a>krhino_sys_time_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, k_time.o(i.krhino_sys_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>

<P><STRONG><a name="[1c5]"></a>krhino_task_create</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, k_task.o(i.krhino_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[50]"></a>krhino_task_deathbed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_task.o(i.krhino_task_deathbed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_task_deathbed &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_c.o(i.cpu_task_stack_init)
</UL>
<P><STRONG><a name="[200]"></a>krhino_task_del</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[18d]"></a>krhino_task_dyn_create</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, k_task.o(i.krhino_task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
</UL>

<P><STRONG><a name="[188]"></a>krhino_task_dyn_del</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_dyn_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</UL>

<P><STRONG><a name="[18a]"></a>krhino_task_info_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, k_task.o(i.krhino_task_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>

<P><STRONG><a name="[18e]"></a>krhino_task_info_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
</UL>

<P><STRONG><a name="[15b]"></a>krhino_task_sleep</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = krhino_task_sleep &rArr; tick_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>

<P><STRONG><a name="[ea]"></a>krhino_tick_proc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, k_time.o(i.krhino_tick_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[190]"></a>krhino_timer_change</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, k_timer.o(i.krhino_timer_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = krhino_timer_change &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
</UL>

<P><STRONG><a name="[194]"></a>krhino_timer_dyn_create</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, k_timer.o(i.krhino_timer_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
</UL>

<P><STRONG><a name="[192]"></a>krhino_timer_dyn_del</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, k_timer.o(i.krhino_timer_dyn_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_timer_dyn_del &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
</UL>

<P><STRONG><a name="[196]"></a>krhino_timer_start</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, k_timer.o(i.krhino_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
</UL>

<P><STRONG><a name="[198]"></a>krhino_timer_stop</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, k_timer.o(i.krhino_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_timer_stop &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
</UL>

<P><STRONG><a name="[1f3]"></a>ktimer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, k_timer.o(i.ktimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[124]"></a>log_cli_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, log.o(i.log_cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = log_cli_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_register_commands
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_init
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aos.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; sys_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bb]"></a>malloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, armcc_libc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_009_run
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_008_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_007_run
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_006_run
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_005_run
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_yloop_aos_2_004_run
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_020_run
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_timer_aos_1_019_run
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_018_run
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_017_run
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_016_run
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_015_run
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_014_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_comm_aos_1_013_run
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_012_run
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_011_run
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_010_run
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_009_run
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_008_run
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_007_run
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_task_aos_1_006_run
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_005_run
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_004_run
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_003_run
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_002_run
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_mm_aos_1_001_run
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_003_run
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_002_run
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_test_kv_aos_2_001_run
</UL>

<P><STRONG><a name="[1f6]"></a>mutex_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, k_mutex.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>

<P><STRONG><a name="[20f]"></a>mutex_pri_look</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, k_mutex.o(i.mutex_pri_look))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[205]"></a>mutex_task_pri_reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, k_mutex.o(i.mutex_task_pri_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[164]"></a>new_file</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vfs_file.o(i.new_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = new_file
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
</UL>

<P><STRONG><a name="[214]"></a>pend_list_reorder</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_pend.o(i.pend_list_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_reorder &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[1ee]"></a>pend_state_end_proc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, k_pend.o(i.pend_state_end_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_state_end_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>

<P><STRONG><a name="[1e9]"></a>pend_task_rm</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, k_pend.o(i.pend_task_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>

<P><STRONG><a name="[1a7]"></a>pend_task_wakeup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, k_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[1ed]"></a>pend_to_blk_obj</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, k_pend.o(i.pend_to_blk_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pend_to_blk_obj &rArr; tick_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[a2]"></a>port_transform_GPIOx</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, gpio.o(i.port_transform_GPIOx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = port_transform_GPIOx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>preferred_cpu_ready_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_sched.o(i.preferred_cpu_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[216]"></a>ready_list_add</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_sched.o(i.ready_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[21b]"></a>ready_list_add_head</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_add_head &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[21a]"></a>ready_list_add_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[202]"></a>ready_list_rm</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[1a3]"></a>ringbuf_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_ringbuf.o(i.ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>

<P><STRONG><a name="[1eb]"></a>ringbuf_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[220]"></a>ringbuf_is_full</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
</UL>

<P><STRONG><a name="[1ec]"></a>ringbuf_pop</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, k_ringbuf.o(i.ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_decompress
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[1a6]"></a>ringbuf_push</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, k_ringbuf.o(i.ringbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_full
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_compress
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[1ea]"></a>ringbuf_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
</UL>

<P><STRONG><a name="[1f0]"></a>runqueue_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_sched.o(i.runqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[1]"></a>soc_err_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, soc_impl.o(i.soc_err_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = soc_err_proc &rArr; soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_impl.o(.data)
</UL>
<P><STRONG><a name="[224]"></a>soc_get_cur_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(i.soc_get_cur_sp))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[19f]"></a>soc_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, soc_init.o(i.soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = soc_init &rArr; Init_System &rArr; hal_uart_init &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Deinit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[206]"></a>task_dyn_create</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, k_task.o(i.task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>

<P><STRONG><a name="[1f9]"></a>task_pri_change</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, k_task.o(i.task_pri_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[11c]"></a>test_certificate</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, aos_test.o(i.test_certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_certificate &rArr; cut_main &rArr; cut_result_report &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_test_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_test
</UL>

<P><STRONG><a name="[67]"></a>tftp_ota_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cli.o(i.tftp_ota_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tftp_ota_thread &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(i.ota_cmd)
</UL>
<P><STRONG><a name="[1f1]"></a>tick_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[208]"></a>tick_list_insert</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, k_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tick_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>

<P><STRONG><a name="[203]"></a>tick_list_rm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[209]"></a>tick_list_update</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, k_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[137]"></a>vfs_device_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, device.o(i.vfs_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vfs_device_init &rArr; aos_register_driver &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[136]"></a>vfs_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vfs.o(i.vfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = vfs_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[1d4]"></a>yts_run</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, yts_main.o(i.yts_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = yts_run &rArr; yunit_test_run &rArr; yunit_run_test_suite &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_run
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_print_result
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_get_test_suite
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_get_test_case
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_test
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_yts_cmd
</UL>

<P><STRONG><a name="[22e]"></a>yunit_get_test_case</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, yunit.o(i.yunit_get_test_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yunit_get_test_case &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[22b]"></a>yunit_get_test_suite</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, yunit.o(i.yunit_get_test_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yunit_get_test_suite &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[22f]"></a>yunit_run_test_case</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, yunit.o(i.yunit_run_test_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = yunit_run_test_case &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_run_test_case
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[22c]"></a>yunit_run_test_suite</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, yunit.o(i.yunit_run_test_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = yunit_run_test_suite &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case_list
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_test_run
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[232]"></a>yunit_test_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, yunit.o(i.yunit_test_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = yunit_test_deinit &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[22a]"></a>yunit_test_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, yunit.o(i.yunit_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yunit_test_init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[231]"></a>yunit_test_print_result</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, yunit.o(i.yunit_test_print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = yunit_test_print_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>

<P><STRONG><a name="[230]"></a>yunit_test_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, yunit.o(i.yunit_test_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = yunit_test_run &rArr; yunit_run_test_suite &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10f]"></a>_flash_read_at</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash.o(i._flash_read_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _flash_read_at &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
</UL>

<P><STRONG><a name="[110]"></a>_flash_unlock_erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, flash.o(i._flash_unlock_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _flash_unlock_erase &rArr; FLASH_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
</UL>

<P><STRONG><a name="[111]"></a>_flash_update</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, flash.o(i._flash_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_write_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_unlock_erase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_read_at
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>

<P><STRONG><a name="[113]"></a>_flash_write_at</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flash.o(i._flash_write_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flash_update
</UL>

<P><STRONG><a name="[1d0]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[dd]"></a>SerialBuffInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.SerialBuffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = SerialBuffInit &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[1d2]"></a>SerialGetSendRemain</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.SerialGetSendRemain))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>

<P><STRONG><a name="[df]"></a>Serial_InterruptRx</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(i.Serial_InterruptRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXREG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>Serial_InterruptTx</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(i.Serial_InterruptTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Serial_InterruptTx
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXREG_Write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>Serial_SvRecv</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart.o(i.Serial_SvRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Serial_SvRecv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</UL>

<P><STRONG><a name="[e6]"></a>Serial_SvSend</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, uart.o(i.Serial_SvSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Serial_SvSend &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>

<P><STRONG><a name="[ec]"></a>UART_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_IRQHandler &rArr; Serial_InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ChkEx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InterruptTx
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_InterruptRx
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, soc_init.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>

<P><STRONG><a name="[bc]"></a>configDelay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, soc_init.o(i.configDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = configDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[222]"></a>soc_print_stack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, soc_impl.o(i.soc_print_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[1ce]"></a>hal_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos.o(i.hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = hal_init &rArr; board_init &rArr; soc_init &rArr; Init_System &rArr; hal_uart_init &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[69]"></a>sys_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = sys_init &rArr; aos_kernel_init &rArr; cli_service_init &rArr; aos_cli_init &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos.o(i.sys_start)
</UL>
<P><STRONG><a name="[20e]"></a>sys_start</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aos.o(i.sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sys_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>var_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aos.o(i.var_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[1a0]"></a>buf_queue_create</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, k_buf_queue.o(i.buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
</UL>

<P><STRONG><a name="[1a4]"></a>buf_queue_send</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, k_buf_queue.o(i.buf_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[1a5]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_buf_queue.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[1dd]"></a>find_up_level</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, k_mm.o(i.find_up_level))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[1e8]"></a>init_mm_region</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, k_mm.o(i.init_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[1de]"></a>k_mm_freelist_delete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_freelist_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_mm_freelist_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[1df]"></a>k_mm_freelist_insert</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, k_mm.o(i.k_mm_freelist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_mm_freelist_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[1db]"></a>k_mm_smallblk_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_mm.o(i.k_mm_smallblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[1e1]"></a>k_mm_smallblk_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mm.o(i.k_mm_smallblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[1dc]"></a>size_to_level</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, k_mm.o(i.size_to_level))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
</UL>

<P><STRONG><a name="[1f8]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_mutex.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[1f7]"></a>mutex_release</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[213]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[215]"></a>klist_rm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_pend.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[212]"></a>pend_list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[221]"></a>ringbuf_headlen_compress</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, k_ringbuf.o(i.ringbuf_headlen_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ringbuf_headlen_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
</UL>

<P><STRONG><a name="[21f]"></a>ringbuf_headlen_decompress</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, k_ringbuf.o(i.ringbuf_headlen_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[21c]"></a>is_ready_list_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(i.is_ready_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[21e]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sched.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[21d]"></a>ready_list_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[1fb]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sem.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[1fa]"></a>sem_create</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, k_sem.o(i.sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>

<P><STRONG><a name="[1fc]"></a>sem_give</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, k_sem.o(i.sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[207]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[204]"></a>klist_rm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_task.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[1ff]"></a>task_create</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, k_task.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>

<P><STRONG><a name="[201]"></a>task_mutex_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, k_task.o(i.task_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = task_mutex_free &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[1ae]"></a>cmd_proc</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, k_timer.o(i.cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</UL>

<P><STRONG><a name="[228]"></a>timer_cb_proc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, k_timer.o(i.timer_cb_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[229]"></a>timer_cmd_proc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, k_timer.o(i.timer_cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[20a]"></a>timer_create</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, k_timer.o(i.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
</UL>

<P><STRONG><a name="[1af]"></a>timer_list_pri_insert</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, k_timer.o(i.timer_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[1b0]"></a>timer_list_rm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_timer.o(i.timer_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[64]"></a>timer_task</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, k_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_timer.o(i.ktimer_init)
</UL>
<P><STRONG><a name="[66]"></a>__item_find_cb</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, kvmgr.o(i.__item_find_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __item_find_cb &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.kv_item_get)
</UL>
<P><STRONG><a name="[4f]"></a>__item_gc_cb</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, kvmgr.o(i.__item_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = __item_gc_cb &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.aos_kv_gc)
</UL>
<P><STRONG><a name="[62]"></a>__item_print_cb</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, kvmgr.o(i.__item_print_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __item_print_cb &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.handle_kv_cmd)
</UL>
<P><STRONG><a name="[65]"></a>__item_recovery_cb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, kvmgr.o(i.__item_recovery_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = __item_recovery_cb &rArr; kv_item_del &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_crc8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(i.kv_init)
</UL>
<P><STRONG><a name="[2]"></a>handle_kv_cmd</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, kvmgr.o(i.handle_kv_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = handle_kv_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kvmgr.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>kv_block_format</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, kvmgr.o(i.kv_block_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = kv_block_format &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
</UL>

<P><STRONG><a name="[146]"></a>kv_init</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, kvmgr.o(i.kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = kv_init &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
</UL>

<P><STRONG><a name="[20c]"></a>kv_item_calc_pos</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kvmgr.o(i.kv_item_calc_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
</UL>

<P><STRONG><a name="[10b]"></a>kv_item_del</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, kvmgr.o(i.kv_item_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = kv_item_del &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
</UL>

<P><STRONG><a name="[13e]"></a>kv_item_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kvmgr.o(i.kv_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = kv_item_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
</UL>

<P><STRONG><a name="[13d]"></a>kv_item_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kvmgr.o(i.kv_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = kv_item_get &rArr; kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
</UL>

<P><STRONG><a name="[14c]"></a>kv_item_store</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, kvmgr.o(i.kv_item_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_crc8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_calc_pos
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_update
</UL>

<P><STRONG><a name="[13f]"></a>kv_item_traverse</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, kvmgr.o(i.kv_item_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = kv_item_traverse &rArr; kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_kv_cmd
</UL>

<P><STRONG><a name="[14b]"></a>kv_item_update</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kvmgr.o(i.kv_item_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
</UL>

<P><STRONG><a name="[141]"></a>kv_state_set</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, kvmgr.o(i.kv_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = kv_state_set &rArr; raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_gc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
</UL>

<P><STRONG><a name="[20b]"></a>raw_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kvmgr.o(i.raw_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = raw_erase &rArr; hal_flash_erase &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
</UL>

<P><STRONG><a name="[105]"></a>raw_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kvmgr.o(i.raw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = raw_read &rArr; hal_flash_read &rArr; _flash_read_at &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_traverse
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_del
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_print_cb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_find_cb
</UL>

<P><STRONG><a name="[107]"></a>raw_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kvmgr.o(i.raw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = raw_write &rArr; hal_flash_write &rArr; _flash_update &rArr; _flash_write_at &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_state_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_block_format
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_gc_cb
</UL>

<P><STRONG><a name="[148]"></a>trigger_gc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kvmgr.o(i.trigger_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_calc_pos
</UL>

<P><STRONG><a name="[10a]"></a>utils_crc8</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, kvmgr.o(i.utils_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utils_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_item_store
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__item_recovery_cb
</UL>

<P><STRONG><a name="[4e]"></a>event_read_cb</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, local_event.o(i.event_read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_read_cb &rArr; aos_read
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_events
</UL>
<BR>[Address Reference Count : 2]<UL><LI> local_event.o(i.aos_event_service_deinit)
<LI> local_event.o(i.aos_event_service_init)
</UL>
<P><STRONG><a name="[1c7]"></a>handle_events</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, local_event.o(i.handle_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handle_events
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read_cb
</UL>

<P><STRONG><a name="[16f]"></a>input_add_event</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, local_event.o(i.input_add_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
</UL>

<P><STRONG><a name="[14f]"></a>dlist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yloop.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
</UL>

<P><STRONG><a name="[11e]"></a>get_context</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yloop.o(i.get_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_exit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_delayed_action
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll_read_fd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_set_eventfd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_poll_read_fd
</UL>

<P><STRONG><a name="[1d9]"></a>inode_set_name</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = inode_set_name &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[16a]"></a>deinit_parg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, select.o(i.deinit_parg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = deinit_parg &rArr; aos_sem_free &rArr; krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[166]"></a>init_parg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, select.o(i.init_parg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = init_parg &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[169]"></a>post_poll</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, select.o(i.post_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = post_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teardown_fd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[167]"></a>pre_poll</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, select.o(i.pre_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pre_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_fd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[218]"></a>setup_fd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, select.o(i.setup_fd))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
</UL>

<P><STRONG><a name="[217]"></a>teardown_fd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, select.o(i.teardown_fd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_poll
</UL>

<P><STRONG><a name="[68]"></a>vfs_poll_notify</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, select.o(i.vfs_poll_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = vfs_poll_notify &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> select.o(i.pre_poll)
</UL>
<P><STRONG><a name="[168]"></a>wait_io</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, select.o(i.wait_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[10c]"></a>_event_write</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, device.o(i._event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _event_write &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ioctl
</UL>

<P><STRONG><a name="[1c6]"></a>dlist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
</UL>

<P><STRONG><a name="[6c]"></a>event_close</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, device.o(i.event_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = event_close &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>event_ioctl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device.o(i.event_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = event_ioctl &rArr; _event_write &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>event_open</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, device.o(i.event_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = event_open &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>event_poll</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, device.o(i.event_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = event_poll &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>event_read</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, device.o(i.event_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = event_read &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>event_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, device.o(i.event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = event_write &rArr; _event_write &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[3]"></a>handle_yts_cmd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.handle_yts_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handle_yts_cmd &rArr; yts_run &rArr; yunit_test_run &rArr; yunit_run_test_suite &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yts_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>log_cmd</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, log.o(i.log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = log_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>cli_main</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, cli.o(i.cli_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = cli_main &rArr; get_input &rArr; tab_complete &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(i.aos_cli_init)
</UL>
<P><STRONG><a name="[74]"></a>devname_cmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cli.o(i.devname_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = devname_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>echo_cmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cli.o(i.echo_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = echo_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>exit_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli.o(i.exit_cmd))
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>get_input</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, cli.o(i.get_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = get_input &rArr; tab_complete &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[1ac]"></a>handle_input</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, cli.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = handle_input &rArr; proc_onecmd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[71]"></a>help_cmd</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cli.o(i.help_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = help_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>lookup_command</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cli.o(i.lookup_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lookup_command &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_onecmd
</UL>

<P><STRONG><a name="[78]"></a>ota_cmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cli.o(i.ota_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ota_cmd &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>print_bad_command</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cli.o(i.print_bad_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = print_bad_command &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[1d3]"></a>proc_onecmd</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cli.o(i.proc_onecmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = proc_onecmd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putstr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[76]"></a>reboot_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cli.o(i.reboot_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = reboot_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reboot
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>tab_complete</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, cli.o(i.tab_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tab_complete &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[77]"></a>uptime_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cli.o(i.uptime_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = uptime_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>version_cmd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cli.o(i.version_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = version_cmd &rArr; aos_cli_printf &rArr; cli_putstr &rArr; aos_uart_send &rArr; hal_uart_send &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cli_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>_run_test_case</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, yunit.o(i._run_test_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _run_test_case &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_case_list
</UL>

<P><STRONG><a name="[233]"></a>yunit_run_test_case_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, yunit.o(i.yunit_run_test_case_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = yunit_run_test_case_list &rArr; _run_test_case &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_run_test_case
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yunit_run_test_suite
</UL>

<P><STRONG><a name="[1b9]"></a>cut_result_report</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cut.o(i.cut_result_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = cut_result_report &rArr; free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[1b7]"></a>filter</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cut.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = filter &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[1b6]"></a>parse_arg</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cut.o(i.parse_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = parse_arg &rArr; usage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cut_main
</UL>

<P><STRONG><a name="[211]"></a>usage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cut.o(i.usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_arg
</UL>

<P><STRONG><a name="[19]"></a>cut_test_kv_aos_2_001_run</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, aos_test.o(i.cut_test_kv_aos_2_001_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = cut_test_kv_aos_2_001_run &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>cut_test_kv_aos_2_002_run</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, aos_test.o(i.cut_test_kv_aos_2_002_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = cut_test_kv_aos_2_002_run &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>cut_test_kv_aos_2_003_run</STRONG> (Thumb, 652 bytes, Stack size 240 bytes, aos_test.o(i.cut_test_kv_aos_2_003_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = cut_test_kv_aos_2_003_run &rArr; aos_kv_set &rArr; kv_item_update &rArr; kv_item_store &rArr; kv_item_calc_pos &rArr; trigger_gc &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kv_del
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>cut_test_mm_aos_1_001_run</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_mm_aos_1_001_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cut_test_mm_aos_1_001_run &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>cut_test_mm_aos_1_002_run</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_mm_aos_1_002_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = cut_test_mm_aos_1_002_run &rArr; aos_zalloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>cut_test_mm_aos_1_003_run</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_mm_aos_1_003_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cut_test_mm_aos_1_003_run &rArr; aos_realloc &rArr; krhino_mm_realloc &rArr; k_mm_realloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_realloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>cut_test_mm_aos_1_004_run</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_mm_aos_1_004_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cut_test_mm_aos_1_004_run &rArr; aos_realloc &rArr; krhino_mm_realloc &rArr; k_mm_realloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_realloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>cut_test_mm_aos_1_005_run</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_mm_aos_1_005_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cut_test_mm_aos_1_005_run &rArr; malloc &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>cut_test_task_aos_1_006_run</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_task_aos_1_006_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_006_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>cut_test_task_aos_1_007_run</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_task_aos_1_007_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_007_run &rArr; aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>cut_test_task_aos_1_008_run</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_task_aos_1_008_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_008_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>cut_test_task_aos_1_009_run</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_task_aos_1_009_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_009_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>cut_test_task_aos_1_010_run</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, aos_test.o(i.cut_test_task_aos_1_010_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_010_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>cut_test_task_aos_1_011_run</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, aos_test.o(i.cut_test_task_aos_1_011_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_011_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>cut_test_task_aos_1_012_run</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, aos_test.o(i.cut_test_task_aos_1_012_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = cut_test_task_aos_1_012_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>cut_test_task_comm_aos_1_013_run</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_task_comm_aos_1_013_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_013_run &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>cut_test_task_comm_aos_1_014_run</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, aos_test.o(i.cut_test_task_comm_aos_1_014_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_014_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>cut_test_task_comm_aos_1_015_run</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_task_comm_aos_1_015_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_015_run &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_is_valid
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>cut_test_task_comm_aos_1_016_run</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, aos_test.o(i.cut_test_task_comm_aos_1_016_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_016_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>cut_test_task_comm_aos_1_017_run</STRONG> (Thumb, 802 bytes, Stack size 72 bytes, aos_test.o(i.cut_test_task_comm_aos_1_017_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_017_run &rArr; aos_queue_recv &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_is_valid
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>cut_test_task_comm_aos_1_018_run</STRONG> (Thumb, 1366 bytes, Stack size 56 bytes, aos_test.o(i.cut_test_task_comm_aos_1_018_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cut_test_task_comm_aos_1_018_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>cut_test_timer_aos_1_019_run</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_timer_aos_1_019_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cut_test_timer_aos_1_019_run &rArr; aos_timer_new &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>cut_test_timer_aos_1_020_run</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_timer_aos_1_020_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cut_test_timer_aos_1_020_run &rArr; aos_timer_new &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>cut_test_yloop_aos_2_004_run</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_yloop_aos_2_004_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_004_run &rArr; aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unregister_event_filter
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>cut_test_yloop_aos_2_005_run</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_yloop_aos_2_005_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_005_run &rArr; aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>cut_test_yloop_aos_2_006_run</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_yloop_aos_2_006_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_006_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>cut_test_yloop_aos_2_007_run</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_yloop_aos_2_007_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_007_run &rArr; aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>cut_test_yloop_aos_2_008_run</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, aos_test.o(i.cut_test_yloop_aos_2_008_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_008_run &rArr; aos_loop_run &rArr; aos_poll &rArr; wait_io &rArr; aos_sem_wait &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>cut_test_yloop_aos_2_009_run</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, aos_test.o(i.cut_test_yloop_aos_2_009_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cut_test_yloop_aos_2_009_run &rArr; aos_task_new &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>delayed_action1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aos_test.o(i.delayed_action1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = delayed_action1 &rArr; aos_post_delayed_action &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_cancel_delayed_action
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aos_test.o(i.cut_test_yloop_aos_2_005_run)
<LI> aos_test.o(i.delayed_action1)
</UL>
<P><STRONG><a name="[5e]"></a>delayed_action2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aos_test.o(i.delayed_action2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = delayed_action2 &rArr; aos_loop_exit &rArr; get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_exit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> aos_test.o(i.cut_test_yloop_aos_2_005_run)
<LI> aos_test.o(i.cut_test_yloop_aos_2_007_run)
<LI> aos_test.o(i.cut_test_yloop_aos_2_008_run)
<LI> aos_test.o(i.task_loop1)
</UL>
<P><STRONG><a name="[60]"></a>delayed_action3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aos_test.o(i.delayed_action3))
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_yloop_aos_2_008_run)
</UL>
<P><STRONG><a name="[1c3]"></a>dump_test_config</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, aos_test.o(i.dump_test_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dump_test_config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_certificate
</UL>

<P><STRONG><a name="[5c]"></a>ev_callback1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aos_test.o(i.ev_callback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ev_callback1 &rArr; aos_loop_exit &rArr; get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_exit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_yloop_aos_2_004_run)
</UL>
<P><STRONG><a name="[54]"></a>task0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aos_test.o(i.task0))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task0 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_aos_1_012_run)
</UL>
<P><STRONG><a name="[51]"></a>task1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_test.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> aos_test.o(i.cut_test_task_aos_1_006_run)
<LI> aos_test.o(i.cut_test_task_aos_1_007_run)
<LI> aos_test.o(i.cut_test_task_aos_1_011_run)
</UL>
<P><STRONG><a name="[52]"></a>task2</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, aos_test.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_delete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aos_test.o(i.cut_test_task_aos_1_008_run)
<LI> aos_test.o(i.cut_test_task_aos_1_009_run)
</UL>
<P><STRONG><a name="[53]"></a>task3</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, aos_test.o(i.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task3 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_key_delete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_aos_1_010_run)
</UL>
<P><STRONG><a name="[55]"></a>task4</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aos_test.o(i.task4))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task4 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_014_run)
</UL>
<P><STRONG><a name="[56]"></a>task5</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aos_test.o(i.task5))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task5 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_014_run)
</UL>
<P><STRONG><a name="[57]"></a>task6</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aos_test.o(i.task6))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task6 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_016_run)
</UL>
<P><STRONG><a name="[58]"></a>task7</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aos_test.o(i.task7))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task7 &rArr; aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_016_run)
</UL>
<P><STRONG><a name="[59]"></a>task8</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aos_test.o(i.task8))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task8 &rArr; aos_queue_recv &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_018_run)
</UL>
<P><STRONG><a name="[5a]"></a>task9</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aos_test.o(i.task9))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task9 &rArr; aos_queue_recv &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; ringbuf_headlen_decompress &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aos_test.o(i.cut_test_task_comm_aos_1_018_run)
</UL>
<P><STRONG><a name="[5f]"></a>task_loop1</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, aos_test.o(i.task_loop1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = task_loop1 &rArr; aos_loop_init &rArr; aos_event_service_init &rArr; aos_poll_read_fd &rArr; csp_printf &rArr; aos_mutex_lock &rArr; krhino_ms_to_ticks &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_delayed_action
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_destroy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aos_test.o(i.cut_test_yloop_aos_2_006_run)
<LI> aos_test.o(i.cut_test_yloop_aos_2_009_run)
</UL>
<P><STRONG><a name="[5b]"></a>timer_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aos_test.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = timer_handler &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aos_test.o(i.cut_test_timer_aos_1_019_run)
<LI> aos_test.o(i.cut_test_timer_aos_1_020_run)
</UL>
<P><STRONG><a name="[114]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fd]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[117]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[116]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
